<?php
/**
 * ProductsApi
 * PHP version 7.2
 *
 * @category Class
 * @package  ProductApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ProductApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ProductApi\ApiException;
use ProductApi\Configuration;
use ProductApi\HeaderSelector;
use ProductApi\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  ProductApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteProductsItem
     *
     * Removes the products resource.
     *
     * @param  string $id id (required)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProductsItem($id)
    {
        $this->deleteProductsItemWithHttpInfo($id);
    }

    /**
     * Operation deleteProductsItemWithHttpInfo
     *
     * Removes the products resource.
     *
     * @param  string $id (required)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductsItemWithHttpInfo($id)
    {
        $request = $this->deleteProductsItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProductsItemAsync
     *
     * Removes the products resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductsItemAsync($id)
    {
        return $this->deleteProductsItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProductsItemAsyncWithHttpInfo
     *
     * Removes the products resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProductsItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteProductsItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProductsItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteProductsItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProductsItem'
            );
        }

        $resourcePath = '/api/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductsCollection
     *
     * Retrieves the collection of products resources.
     *
     * @param  string $title title (optional)
     * @param  string $sku sku (optional)
     * @param  string[] $sku2 sku2 (optional)
     * @param  string $description description (optional)
     * @param  string $quantity_between quantity_between (optional)
     * @param  string $quantity_gt quantity_gt (optional)
     * @param  string $quantity_gte quantity_gte (optional)
     * @param  string $quantity_lt quantity_lt (optional)
     * @param  string $quantity_lte quantity_lte (optional)
     * @param  bool $is_available is_available (optional)
     * @param  int $page The collection page number (optional)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProductApi\Model\ProductsRead[]
     */
    public function getProductsCollection($title = null, $sku = null, $sku2 = null, $description = null, $quantity_between = null, $quantity_gt = null, $quantity_gte = null, $quantity_lt = null, $quantity_lte = null, $is_available = null, $page = null)
    {
        list($response) = $this->getProductsCollectionWithHttpInfo($title, $sku, $sku2, $description, $quantity_between, $quantity_gt, $quantity_gte, $quantity_lt, $quantity_lte, $is_available, $page);
        return $response;
    }

    /**
     * Operation getProductsCollectionWithHttpInfo
     *
     * Retrieves the collection of products resources.
     *
     * @param  string $title (optional)
     * @param  string $sku (optional)
     * @param  string[] $sku2 (optional)
     * @param  string $description (optional)
     * @param  string $quantity_between (optional)
     * @param  string $quantity_gt (optional)
     * @param  string $quantity_gte (optional)
     * @param  string $quantity_lt (optional)
     * @param  string $quantity_lte (optional)
     * @param  bool $is_available (optional)
     * @param  int $page The collection page number (optional)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProductApi\Model\ProductsRead[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsCollectionWithHttpInfo($title = null, $sku = null, $sku2 = null, $description = null, $quantity_between = null, $quantity_gt = null, $quantity_gte = null, $quantity_lt = null, $quantity_lte = null, $is_available = null, $page = null)
    {
        $request = $this->getProductsCollectionRequest($title, $sku, $sku2, $description, $quantity_between, $quantity_gt, $quantity_gte, $quantity_lt, $quantity_lte, $is_available, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProductApi\Model\ProductsRead[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProductApi\Model\ProductsRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProductApi\Model\ProductsRead[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProductApi\Model\ProductsRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductsCollectionAsync
     *
     * Retrieves the collection of products resources.
     *
     * @param  string $title (optional)
     * @param  string $sku (optional)
     * @param  string[] $sku2 (optional)
     * @param  string $description (optional)
     * @param  string $quantity_between (optional)
     * @param  string $quantity_gt (optional)
     * @param  string $quantity_gte (optional)
     * @param  string $quantity_lt (optional)
     * @param  string $quantity_lte (optional)
     * @param  bool $is_available (optional)
     * @param  int $page The collection page number (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsCollectionAsync($title = null, $sku = null, $sku2 = null, $description = null, $quantity_between = null, $quantity_gt = null, $quantity_gte = null, $quantity_lt = null, $quantity_lte = null, $is_available = null, $page = null)
    {
        return $this->getProductsCollectionAsyncWithHttpInfo($title, $sku, $sku2, $description, $quantity_between, $quantity_gt, $quantity_gte, $quantity_lt, $quantity_lte, $is_available, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductsCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of products resources.
     *
     * @param  string $title (optional)
     * @param  string $sku (optional)
     * @param  string[] $sku2 (optional)
     * @param  string $description (optional)
     * @param  string $quantity_between (optional)
     * @param  string $quantity_gt (optional)
     * @param  string $quantity_gte (optional)
     * @param  string $quantity_lt (optional)
     * @param  string $quantity_lte (optional)
     * @param  bool $is_available (optional)
     * @param  int $page The collection page number (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsCollectionAsyncWithHttpInfo($title = null, $sku = null, $sku2 = null, $description = null, $quantity_between = null, $quantity_gt = null, $quantity_gte = null, $quantity_lt = null, $quantity_lte = null, $is_available = null, $page = null)
    {
        $returnType = '\ProductApi\Model\ProductsRead[]';
        $request = $this->getProductsCollectionRequest($title, $sku, $sku2, $description, $quantity_between, $quantity_gt, $quantity_gte, $quantity_lt, $quantity_lte, $is_available, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductsCollection'
     *
     * @param  string $title (optional)
     * @param  string $sku (optional)
     * @param  string[] $sku2 (optional)
     * @param  string $description (optional)
     * @param  string $quantity_between (optional)
     * @param  string $quantity_gt (optional)
     * @param  string $quantity_gte (optional)
     * @param  string $quantity_lt (optional)
     * @param  string $quantity_lte (optional)
     * @param  bool $is_available (optional)
     * @param  int $page The collection page number (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductsCollectionRequest($title = null, $sku = null, $sku2 = null, $description = null, $quantity_between = null, $quantity_gt = null, $quantity_gte = null, $quantity_lt = null, $quantity_lte = null, $is_available = null, $page = null)
    {

        $resourcePath = '/api/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($title)) {
            $title = ObjectSerializer::serializeCollection($title, '', true);
        }
        if ($title !== null) {
            $queryParams['title'] = $title;
        }
        // query params
        if (is_array($sku)) {
            $sku = ObjectSerializer::serializeCollection($sku, '', true);
        }
        if ($sku !== null) {
            $queryParams['sku'] = $sku;
        }
        // query params
        if ($sku2 !== null) {
            if('form' === 'form' && is_array($sku2)) {
                foreach($sku2 as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sku[]'] = $sku2;
            }
        }
        // query params
        if (is_array($description)) {
            $description = ObjectSerializer::serializeCollection($description, '', true);
        }
        if ($description !== null) {
            $queryParams['description'] = $description;
        }
        // query params
        if (is_array($quantity_between)) {
            $quantity_between = ObjectSerializer::serializeCollection($quantity_between, '', true);
        }
        if ($quantity_between !== null) {
            $queryParams['quantity[between]'] = $quantity_between;
        }
        // query params
        if (is_array($quantity_gt)) {
            $quantity_gt = ObjectSerializer::serializeCollection($quantity_gt, '', true);
        }
        if ($quantity_gt !== null) {
            $queryParams['quantity[gt]'] = $quantity_gt;
        }
        // query params
        if (is_array($quantity_gte)) {
            $quantity_gte = ObjectSerializer::serializeCollection($quantity_gte, '', true);
        }
        if ($quantity_gte !== null) {
            $queryParams['quantity[gte]'] = $quantity_gte;
        }
        // query params
        if (is_array($quantity_lt)) {
            $quantity_lt = ObjectSerializer::serializeCollection($quantity_lt, '', true);
        }
        if ($quantity_lt !== null) {
            $queryParams['quantity[lt]'] = $quantity_lt;
        }
        // query params
        if (is_array($quantity_lte)) {
            $quantity_lte = ObjectSerializer::serializeCollection($quantity_lte, '', true);
        }
        if ($quantity_lte !== null) {
            $queryParams['quantity[lte]'] = $quantity_lte;
        }
        // query params
        if (is_array($is_available)) {
            $is_available = ObjectSerializer::serializeCollection($is_available, '', true);
        }
        if ($is_available !== null) {
            $queryParams['isAvailable'] = $is_available;
        }
        // query params
        if (is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if ($page !== null) {
            $queryParams['page'] = $page;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductsItem
     *
     * Retrieves a products resource.
     *
     * @param  string $id id (required)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProductApi\Model\ProductsRead
     */
    public function getProductsItem($id)
    {
        list($response) = $this->getProductsItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getProductsItemWithHttpInfo
     *
     * Retrieves a products resource.
     *
     * @param  string $id (required)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProductApi\Model\ProductsRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsItemWithHttpInfo($id)
    {
        $request = $this->getProductsItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProductApi\Model\ProductsRead' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProductApi\Model\ProductsRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProductApi\Model\ProductsRead';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProductApi\Model\ProductsRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductsItemAsync
     *
     * Retrieves a products resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsItemAsync($id)
    {
        return $this->getProductsItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductsItemAsyncWithHttpInfo
     *
     * Retrieves a products resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsItemAsyncWithHttpInfo($id)
    {
        $returnType = '\ProductApi\Model\ProductsRead';
        $request = $this->getProductsItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductsItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductsItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProductsItem'
            );
        }

        $resourcePath = '/api/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postProductsCollection
     *
     * Creates a products resource.
     *
     * @param  \ProductApi\Model\ProductsWrite $products The new products resource (optional)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProductApi\Model\ProductsRead
     */
    public function postProductsCollection($products = null)
    {
        list($response) = $this->postProductsCollectionWithHttpInfo($products);
        return $response;
    }

    /**
     * Operation postProductsCollectionWithHttpInfo
     *
     * Creates a products resource.
     *
     * @param  \ProductApi\Model\ProductsWrite $products The new products resource (optional)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProductApi\Model\ProductsRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function postProductsCollectionWithHttpInfo($products = null)
    {
        $request = $this->postProductsCollectionRequest($products);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\ProductApi\Model\ProductsRead' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProductApi\Model\ProductsRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProductApi\Model\ProductsRead';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProductApi\Model\ProductsRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postProductsCollectionAsync
     *
     * Creates a products resource.
     *
     * @param  \ProductApi\Model\ProductsWrite $products The new products resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProductsCollectionAsync($products = null)
    {
        return $this->postProductsCollectionAsyncWithHttpInfo($products)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postProductsCollectionAsyncWithHttpInfo
     *
     * Creates a products resource.
     *
     * @param  \ProductApi\Model\ProductsWrite $products The new products resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProductsCollectionAsyncWithHttpInfo($products = null)
    {
        $returnType = '\ProductApi\Model\ProductsRead';
        $request = $this->postProductsCollectionRequest($products);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postProductsCollection'
     *
     * @param  \ProductApi\Model\ProductsWrite $products The new products resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postProductsCollectionRequest($products = null)
    {

        $resourcePath = '/api/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/html'],
                ['application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($products)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($products));
            } else {
                $httpBody = $products;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putProductsItem
     *
     * Replaces the products resource.
     *
     * @param  string $id id (required)
     * @param  \ProductApi\Model\ProductsWrite $products The updated products resource (optional)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ProductApi\Model\ProductsRead
     */
    public function putProductsItem($id, $products = null)
    {
        list($response) = $this->putProductsItemWithHttpInfo($id, $products);
        return $response;
    }

    /**
     * Operation putProductsItemWithHttpInfo
     *
     * Replaces the products resource.
     *
     * @param  string $id (required)
     * @param  \ProductApi\Model\ProductsWrite $products The updated products resource (optional)
     *
     * @throws \ProductApi\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ProductApi\Model\ProductsRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function putProductsItemWithHttpInfo($id, $products = null)
    {
        $request = $this->putProductsItemRequest($id, $products);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\ProductApi\Model\ProductsRead' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ProductApi\Model\ProductsRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ProductApi\Model\ProductsRead';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ProductApi\Model\ProductsRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putProductsItemAsync
     *
     * Replaces the products resource.
     *
     * @param  string $id (required)
     * @param  \ProductApi\Model\ProductsWrite $products The updated products resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putProductsItemAsync($id, $products = null)
    {
        return $this->putProductsItemAsyncWithHttpInfo($id, $products)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putProductsItemAsyncWithHttpInfo
     *
     * Replaces the products resource.
     *
     * @param  string $id (required)
     * @param  \ProductApi\Model\ProductsWrite $products The updated products resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putProductsItemAsyncWithHttpInfo($id, $products = null)
    {
        $returnType = '\ProductApi\Model\ProductsRead';
        $request = $this->putProductsItemRequest($id, $products);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putProductsItem'
     *
     * @param  string $id (required)
     * @param  \ProductApi\Model\ProductsWrite $products The updated products resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putProductsItemRequest($id, $products = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putProductsItem'
            );
        }

        $resourcePath = '/api/products/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/html'],
                ['application/json', 'text/html']
            );
        }

        // for model (json/xml)
        if (isset($products)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($products));
            } else {
                $httpBody = $products;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
